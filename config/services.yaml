# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    image_articles_thumbnails_directory: '%kernel.project_dir%/public/uploads/articles/thumbnails/'
    image_articles_thumbnails_display: '/uploads/articles/thumbnails/'
    # This parameter defines the codes of the locales (languages) enabled in the application
    app_locales: en|ru

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
#        public: false

        bind:
            $targetDir: '%image_articles_thumbnails_directory%'

    # Not used 'App\Service\Uploader' because there is an error 'Cannot autowire service "App\Service\Uploader": argument "$targetDir" of method "__construct()" is type-hinted "string", you should configure its value explicitly.'
#    App\Service\Uploader:
#        arguments:
#            $targetDir: '%image_articles_thumbnails_directory%'


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\Web\:
        resource: '../src/Controller/Web'
        tags: ['controller.service_arguments']

    App\Controller\Api\:
        resource: '../src/Controller/Api'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    security.access.post_voter:
        class:      App\Security\PostVoter
        public:     false
        tags:
        - { name: security.voter }

    app.menu_builder:
        class: App\Menu\MenuBuilder
        arguments: ["@knp_menu.factory"]

    app.main_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: ["@app.menu_builder", createMainMenu]
        arguments: ["@request_stack"]
        tags:
        - { name: knp_menu.menu, alias: main } # The alias is what is used to retrieve the menu

    admin.article:
        class: App\Admin\ArticleAdmin
        arguments: [~, App\Entity\Article, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, group: 'Blog', label: admin.article }

    admin.category:
        class: App\Admin\CategoryAdmin
        arguments: [~, App\Entity\Category, RedCodeTreeBundle:TreeAdmin, 'title']
        tags:
        - { name: sonata.admin, manager_type: orm, group: 'Blog', label: admin.category }

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, group: 'Blog', label: admin.user }

    admin.tag:
        class: App\Admin\TagAdmin
        arguments: [~, App\Entity\Tag, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, group: 'Blog', label: admin.tags }

    admin.comment:
        class: App\Admin\CommentAdmin
        arguments: [~, App\Entity\Comment, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, group: 'Blog', label: admin.comments }

    admin.page:
        class: App\Admin\PageAdmin
        arguments: [~, App\Entity\Page, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, group: 'Pages', label: admin.pages }

    app.notification_sender:
        class: App\Service\NotificationSender
        arguments: ['@doctrine.orm.entity_manager', '@templating', ' @router']

    App\Service\Paginator:
        $limit: '%limit.article_items_per_page%'
